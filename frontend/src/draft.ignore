// import TaskCard from "../components/TaskCard";
import React, { useEffect } from "react";
import TaskCard from "./TaskCard.tsx";
import Task from "../interfaces/TaskInterface.ts";
import {fetchTasks} from "../redux/actions/taskActions.ts";
import {connect} from "react-redux";
interface Props {
  view: string;
  tasks: Task[] | null;
  loading: boolean;
  fetchTasks: () => void;
}

const TaskBoardRender: React.FC<Props> = ({ view, tasks, loading, fetchTasks }) => {
  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  if (loading || !tasks) return null;

  const tasksDone = tasks.filter((task: Task) => task.isDone);
  const tasksInProgress = tasks.filter((task: Task) => !task.isDone);

  const renderedTasksDone = tasksDone.map((task: Task) => (
    <TaskCard
      key={task._id}
      id={task._id}
      title={task.title}
      desc={task.desc}
      dueDate={task.due}
      dateAdded={new Date()}
      view={view}
      isDone={task.isDone}
    />
  ));

  const renderedTasksInProgress = tasksInProgress.map((task: Task) => (
    <TaskCard
      key={task._id}
      id={task._id}
      title={task.title}
      desc={task.desc}
      dueDate={task.due}
      dateAdded={new Date()}
      view={view}
      isDone={task.isDone}
    />
  ));
  let current:JSX.Element
  if (view === "List") {
    current = <div className="flex flex-col gap-2">{renderedTasksInProgress}</div>;
  } else {
    current = (
      <div className={`flex flex-row gap-2 w-full`}>
        <div className={`w-full`}>
          <h6 className={`text-slate-500 font-medium py-2 my-2`}>In Progress</h6>
          <div className="flex flex-col gap-2">{renderedTasksInProgress}</div>
        </div>
        <div className={`w-full`}>
          <h6 className={`text-emerald-500 font-medium py-2 my-2`}>Done</h6>
          <div className="flex flex-col gap-2">{renderedTasksDone}</div>
        </div>
      </div>
    );
  }
  return current
};

const mapStateToProps = (state: any) => {
  return {
    tasks: state.task.tasks,
    loading: state.task.loading,
  };
};

const mapDispatchToProps = {
  fetchTasks,
};

export default connect(mapStateToProps, mapDispatchToProps)(TaskBoardRender);




  // TaskCard.tsx
  //
  // const onSaveChanges = () => {
  //   // patch request
  //   console.log(`http://localhost:5000/tasks/${id}`)
  //   const updatedData = {
  //     title: editedTitle,
  //     desc: editedDesc,
  //     dueDate: editedDueDate,
  //   };
  //   console.log("changes:", updatedData);
  //
  //   // Send the PUT request with Axios
  //   axios
  //     .put(`http://localhost:5000/tasks/${id}`, updatedData)
  //     .then((response) => {
  //       console.log("Successfully updated task:", response.data);
  //     })
  //     .catch((error) => {
  //       console.error("Error updating task:", error);
  //     });
  //
  //   toggleEditMode();
  //   toggleModal();
  // };